name: CI

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 4 * * 0,3" # 4 a.m. UTC every Sun and Wed, keep actions-cache available

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  msrv:
    name: cargo build with MSRV
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-13-large]
      fail-fast: false
    steps:
      - name: Install Rust toolchain
        run: rustup toolchain install
        with:
          toolchain: 1.75.0 # MSRV, should sync with `rust-toolchain` in `Cargo.toml`
          target: wasm32-unknown-unknown
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-msrv-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-msrv-
            ${{ runner.os }}-
      - name: Run builds
        run: |
          cargo build --workspace --exclude ic-cdk-e2e-tests --target wasm32-unknown-unknown
          cargo build --workspace --exclude ic-cdk-e2e-tests --target wasm32-unknown-unknown --release
          cargo build --example=work

  test:
    name: cargo test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-13-large]
      fail-fast: false
    steps:
      - name: Install Rust toolchain
        run: rustup toolchain install
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-test-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: Run tests
        run:
          | # https://github.com/rust-lang/cargo/issues/6669 we have to run ALL tests with two commands
          cargo test --all-targets --no-fail-fast
          cargo test --doc

  wasm64:
    name: wasm64 e2e
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-13-large]
      fail-fast: false
    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-src
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-wasm64-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-wasm64-
            ${{ runner.os }}-
      - name: Run tests
        run: WASM64=1 cargo test --package ic-cdk-e2e-tests --no-fail-fast

  fmt:
    name: cargo fmt
    runs-on: ubuntu-24.04
    steps:
      - name: Install Rust toolchain
        run: rustup toolchain install
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-fmt-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-fmt-
            ${{ runner.os }}-
      - name: Check formatting
        run: |
          cargo fmt --all -- --check

  clippy:
    name: cargo clippy
    runs-on: ubuntu-24.04
    steps:
      - name: Install Rust toolchain
        run: rustup toolchain install
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-clippy-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-clippy-
            ${{ runner.os }}-
      - name: Run clippy
        run: |
          cargo clippy --tests --benches -- -D warnings

  doc:
    name: cargo doc
    runs-on: ubuntu-24.04
    steps:
      - name: Install Rust toolchain
        run: rustup toolchain install
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-doc-${{ hashFiles('Cargo.lock', 'rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-doc-
            ${{ runner.os }}-
      - name: Run doc
        run: |
          RUSTDOCFLAGS="-D warnings" cargo doc

  aggregate:
    name: ci:required
    if: ${{ always() }}
    needs: [msrv, test, wasm64, fmt, clippy, doc]
    runs-on: ubuntu-24.04
    steps:
      - name: check msrv result
        if: ${{ needs.msrv.result != 'success' }}
        run: exit 1
      - name: check test result
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
      - name: check wasm64 result
        if: ${{ needs.wasm64.result != 'success' }}
        run: exit 1
      - name: check fmt result
        if: ${{ needs.fmt.result != 'success' }}
        run: exit 1
      - name: check clippy result
        if: ${{ needs.clippy.result != 'success' }}
        run: exit 1
