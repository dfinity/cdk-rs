pub mod t { pub type Empty = :: ic_cdk :: export :: candid :: Empty ; pub type Principal = :: ic_cdk :: export :: Principal ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R3 { pub canister_id : canister_id , } # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R10 { pub canister_id : canister_id , } pub type Text = String ; pub type Nat = :: ic_cdk :: export :: candid :: Nat ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct canister_settings { pub freezing_threshold : :: std :: option :: Option < Nat > , pub controllers : :: std :: option :: Option < :: std :: vec :: Vec < Principal > > , pub memory_allocation : :: std :: option :: Option < Nat > , pub compute_allocation : :: std :: option :: Option < Nat > , } pub type Nat16 = u16 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R0 { pub canister_id : canister_id , } # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R5 { pub canister_id : canister_id , } # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R6 { pub arg : :: std :: vec :: Vec < Nat8 > , pub wasm_module : wasm_module , pub mode : _V1 , pub canister_id : canister_id , } pub type Int16 = i16 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R4 { pub canister_id : canister_id , } # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R2 { pub settings : :: std :: option :: Option < canister_settings > , } # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R11 { pub canister_id : canister_id , } pub type Nat64 = u64 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct definite_canister_settings { pub freezing_threshold : Nat , pub controllers : :: std :: vec :: Vec < Principal > , pub memory_allocation : Nat , pub compute_allocation : Nat , } type canister_id = Principal ; pub type Float32 = f32 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R8 { pub canister_id : canister_id , } pub type Float64 = f64 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R12 { pub canister_id : canister_id , } pub type Nat8 = u8 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R13 { pub canister_id : Principal , pub settings : canister_settings , } type wasm_module = :: std :: vec :: Vec < Nat8 > ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R9 { pub canister_id : canister_id , pub amount : Nat , } pub type Nat32 = u32 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R1 { pub status : _V0 , pub memory_size : Nat , pub cycles : Nat , pub settings : definite_canister_settings , pub module_hash : :: std :: option :: Option < :: std :: vec :: Vec < Nat8 > > , } pub type Int32 = i32 ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub struct _R7 { pub settings : :: std :: option :: Option < canister_settings > , pub amount : :: std :: option :: Option < Nat > , } # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub enum _V0 { stopped , stopping , running , } pub type Int = :: ic_cdk :: export :: candid :: Int ; pub type Null = (()) ; # [derive (:: std :: fmt :: Debug , :: std :: clone :: Clone , :: std :: cmp :: PartialEq , :: ic_cdk :: export :: serde :: Deserialize , :: ic_cdk :: export :: candid :: CandidType)] # [serde (crate = "::ic_cdk::export::serde")] pub enum _V1 { reinstall , upgrade , install , } type user_id = Principal ; pub type Int64 = i64 ; pub type Bool = bool ; pub type Int8 = i8 ; pub type Reserved = :: ic_cdk :: export :: candid :: Reserved ; } pub use t :: * ; pub async fn update_settings (arg0 : _R13) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "update_settings" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn delete_canister (arg0 : _R4) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "delete_canister" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn deposit_cycles (arg0 : _R5) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "deposit_cycles" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn stop_canister (arg0 : _R11) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "stop_canister" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn provisional_create_canister_with_cycles (arg0 : _R7) -> (_R8 ,) { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "provisional_create_canister_with_cycles" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn provisional_top_up_canister (arg0 : _R9) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "provisional_top_up_canister" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn canister_status (arg0 : _R0) -> (_R1 ,) { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "canister_status" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn start_canister (arg0 : _R10) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "start_canister" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn raw_rand () -> (:: std :: vec :: Vec < Nat8 > ,) { :: ic_cdk :: call (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "raw_rand" , () ,) . await . unwrap () } pub async fn uninstall_code (arg0 : _R12) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "uninstall_code" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn install_code (arg0 : _R6) -> () { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "install_code" , (arg0 ,) ,) . await . unwrap () . 0 } pub async fn create_canister (arg0 : _R2) -> (_R3 ,) { :: ic_cdk :: call :: < _ , (_ ,) > (:: ic_cdk :: export :: candid :: Principal :: from_slice (& [] [..]) , "create_canister" , (arg0 ,) ,) . await . unwrap () . 0 }