ic0.msg_arg_data_size : () -> usize;                                          // I U Q CQ Ry CRy F
ic0.msg_arg_data_copy : (dst : usize, offset : usize, size : usize) -> ();    // I U Q CQ Ry CRy F
ic0.msg_caller_size : () -> usize;                                            // *
ic0.msg_caller_copy : (dst : usize, offset: usize, size : usize) -> ();       // *
ic0.msg_reject_code : () -> u32;                                              // Ry Rt CRy CRt
ic0.msg_reject_msg_size : () -> usize;                                        // Rt CRt
ic0.msg_reject_msg_copy : (dst : usize, offset : usize, size : usize) -> ();  // Rt CRt

ic0.msg_reply_data_append : (src : usize, size : usize) -> ();                // U Q CQ Ry Rt CRy CRt
ic0.msg_reply : () -> ();                                                     // U Q CQ Ry Rt CRy CRt
ic0.msg_reject : (src : usize, size : usize) -> ();                           // U Q CQ Ry Rt CRy CRt

ic0.msg_cycles_available : () -> u64;                                         // U Rt Ry
ic0.msg_cycles_available128 : (dst : usize) -> ();                            // U Rt Ry
ic0.msg_cycles_refunded : () -> u64;                                          // Rt Ry
ic0.msg_cycles_refunded128 : (dst : usize) -> ();                             // Rt Ry
ic0.msg_cycles_accept : (max_amount : u64) -> (amount : u64);                 // U Rt Ry
ic0.msg_cycles_accept128 : (max_amount_high : u64, max_amount_low: u64, dst : usize)
                       -> ();                                                 // U Rt Ry
ic0.cycles_burn128 : (amount_high : u64, amount_low : u64, dst : usize) -> ();// I G U Ry Rt C T

ic0.canister_self_size : () -> usize;                                         // *
ic0.canister_self_copy : (dst : usize, offset : usize, size : usize) -> ();   // *
ic0.canister_cycle_balance : () -> u64;                                       // *
ic0.canister_cycle_balance128 : (dst : usize) -> ();                          // *
ic0.canister_status : () -> u32;                                              // *
ic0.canister_version : () -> u64;                                             // *

ic0.msg_method_name_size : () -> usize;                                       // F
ic0.msg_method_name_copy : (dst : usize, offset : usize, size : usize) -> (); // F
ic0.accept_message : () -> ();                                                // F

ic0.call_new :                                                                // U CQ Ry Rt CRy CRt T
  ( callee_src  : usize,
    callee_size : usize,
    name_src : usize,
    name_size : usize,
    reply_fun : usize,
    reply_env : usize,
    reject_fun : usize,
    reject_env : usize
  ) -> ();
ic0.call_on_cleanup : (fun : usize, env : usize) -> ();                       // U CQ Ry Rt CRy CRt T
ic0.call_data_append : (src : usize, size : usize) -> ();                     // U CQ Ry Rt CRy CRt T
ic0.call_cycles_add : (amount : u64) -> ();                                   // U Ry Rt T
ic0.call_cycles_add128 : (amount_high : u64, amount_low: u64) -> ();          // U Ry Rt T
ic0.call_perform : () -> ( err_code : u32 );                                  // U CQ Ry Rt CRy CRt T

ic0.stable_size : () -> (page_count : i32);                                   // * s
ic0.stable_grow : (new_pages : i32) -> (old_page_count : i32);                // * s
ic0.stable_write : (offset : u32, src : usize, size : u32) -> ();             // * s
ic0.stable_read : (dst : usize, offset : u32, size : u32) -> ();              // * s
ic0.stable64_size : () -> (page_count : i64);                                 // * s
ic0.stable64_grow : (new_pages : i64) -> (old_page_count : i64);              // * s
ic0.stable64_write : (offset : u64, src : u64, size : u64) -> ();             // * s
ic0.stable64_read : (dst : u64, offset : u64, size : u64) -> ();              // * s

ic0.certified_data_set : (src: usize, size: usize) -> ();                     // I G U Ry Rt T
ic0.data_certificate_present : () -> u32;                                     // *
ic0.data_certificate_size : () -> usize;                                      // *
ic0.data_certificate_copy : (dst: usize, offset: usize, size: usize) -> ();   // *

ic0.time : () -> (timestamp : i64);                                           // *
ic0.global_timer_set : (timestamp : i64) -> i64;                              // I G U Ry Rt C T
ic0.performance_counter : (counter_type : u32) -> (counter : u64);            // * s
ic0.is_controller: (src: usize, size: usize) -> ( result: usize);             // * s

ic0.debug_print : (src : usize, size : usize) -> ();                          // * s
ic0.trap : (src : usize, size : usize) -> ();                                 // * s