ic0.msg_arg_data_size : () -> i32;                                          // I U Q Ry F
ic0.msg_arg_data_copy : (dst : i32, offset : i32, size : i32) -> ();        // I U Q Ry F
ic0.msg_caller_size : () -> i32;                                            // I G U Q F
ic0.msg_caller_copy : (dst : i32, offset: i32, size : i32) -> ();           // I G U Q F
ic0.msg_reject_code : () -> i32;                                            // Ry Rt
ic0.msg_reject_msg_size : () -> i32;                                        // Rt
ic0.msg_reject_msg_copy : (dst : i32, offset : i32, size : i32) -> ();      // Rt

ic0.msg_reply_data_append : (src : i32, size : i32) -> ();                  // U Q Ry Rt
ic0.msg_reply : () -> ();                                                   // U Q Ry Rt
ic0.msg_reject : (src : i32, size : i32) -> ();                             // U Q Ry Rt

ic0.msg_cycles_available : () -> i64;                                       // U Rt Ry
ic0.msg_cycles_available128 : (dst : i32) -> ();                            // U Rt Ry
ic0.msg_cycles_refunded : () -> i64;                                        // Rt Ry
ic0.msg_cycles_refunded128 : (dst : i32) -> ();                             // Rt Ry
ic0.msg_cycles_accept : (max_amount : i64) -> (amount : i64);               // U Rt Ry
ic0.msg_cycles_accept128 : (max_amount_high : i64, max_amount_low: i64, dst : i32)
                       -> ();                                               // U Rt Ry

ic0.canister_self_size : () -> i32;                                         // *
ic0.canister_self_copy : (dst : i32, offset : i32, size : i32) -> ();       // *
ic0.canister_cycle_balance : () -> i64;                                     // *
ic0.canister_cycle_balance128 : (dst : i32) -> ();                          // *
ic0.canister_status : () -> i32;                                            // *
ic0.canister_version : () -> i64;                                           // *

ic0.msg_method_name_size : () -> i32;                                       // F
ic0.msg_method_name_copy : (dst : i32, offset : i32, size : i32) -> ();     // F
ic0.accept_message : () -> ();                                              // F

ic0.call_new :                                                              // U Ry Rt T
  ( callee_src  : i32,
    callee_size : i32,
    name_src : i32,
    name_size : i32,
    reply_fun : i32,
    reply_env : i32,
    reject_fun : i32,
    reject_env : i32
  ) -> ();
ic0.call_on_cleanup : (fun : i32, env : i32) -> ();                         // U Ry Rt T
ic0.call_data_append : (src : i32, size : i32) -> ();                       // U Ry Rt T
ic0.call_cycles_add : (amount : i64) -> ();                                 // U Ry Rt T
ic0.call_cycles_add128 : (amount_high : i64, amount_low: i64) -> ();        // U Ry Rt T
ic0.call_perform : () -> ( err_code : i32 );                                // U Ry Rt T

ic0.stable_size : () -> (page_count : i32);                                 // * s
ic0.stable_grow : (new_pages : i32) -> (old_page_count : i32);              // * s
ic0.stable_write : (offset : i32, src : i32, size : i32) -> ();             // * s
ic0.stable_read : (dst : i32, offset : i32, size : i32) -> ();              // * s
ic0.stable64_size : () -> (page_count : i64);                               // * s
ic0.stable64_grow : (new_pages : i64) -> (old_page_count : i64);            // * s
ic0.stable64_write : (offset : i64, src : i64, size : i64) -> ();           // * s
ic0.stable64_read : (dst : i64, offset : i64, size : i64) -> ();            // * s

ic0.certified_data_set : (src: i32, size: i32) -> ();                       // I G U Ry Rt T
ic0.data_certificate_present : () -> i32;                                   // *
ic0.data_certificate_size : () -> i32;                                      // *
ic0.data_certificate_copy : (dst: i32, offset: i32, size: i32) -> ();       // *

ic0.time : () -> (timestamp : i64);                                         // *
ic0.global_timer_set : (timestamp : i64) -> i64;                            // I G U Ry Rt C T
ic0.performance_counter : (counter_type : i32) -> (counter : i64);          // * s
ic0.is_controller: (src: i32, size: i32) -> ( result: i32);                 // * s

ic0.debug_print : (src : i32, size : i32) -> ();                            // * s
ic0.trap : (src : i32, size : i32) -> ();                                   // * s