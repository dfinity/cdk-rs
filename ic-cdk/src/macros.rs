/// Create a `get_candid_pointer` method so that `dfx` can execute it to extract candid definition.
///
/// Call this macro only if you want the Candid export behavior.
/// Only call it once at the end of canister code outside query/update definition.
pub use ic_cdk_macros::export_candid;

/// Register a query call entry point.
///
/// This attribute macro will export a function with name `canister_query <name>`
/// in the canister module.
///
/// # Examples
///
/// ## Basic Usage
///
/// ```rust
/// # use ic_cdk::query;
/// #[query]
/// fn query_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Custom Export Name
///
/// You can customize the name of the exported function.
///
/// ```rust
/// # use ic_cdk::query;
/// #[query(name = "some_name")]
/// fn query_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Hide From Candid Generation
///
/// If you want to hide this method in the Candid generated by [`export_candid!`],
/// you will need to set `hidden` to `true`. The entry point still exists in the canister.
///
/// ```rust
/// # use ic_cdk::query;
/// #[query(hidden = true)]
/// fn query_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Guard Functions
///
/// You can specify one or more guard functions to be executed before the query function.
/// Each guard function must return a `Result<(), String>`.
/// If any guard function returns an error, the query function will not proceed.
///
/// ```rust
/// # use ic_cdk::query;
/// fn guard1() -> Result<(), String> {
///     // ...
/// # unimplemented!()
/// }
/// fn guard2() -> Result<(), String> {
///     // ...
/// # unimplemented!()
/// }
/// #[query(guard = "guard1", guard = "guard2")]
/// fn query_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Custom Argument Decoding
///
/// You can specify a custom function to decode the arguments.
/// The function must take a `Vec<u8>` as an argument and return the same type as the query arguments.
///
/// ```rust
/// # use ic_cdk::query;
/// fn decode_args(arg_bytes: Vec<u8>) -> (u32, u32) {
///    // ...
/// # unimplemented!()
/// }
/// #[query(decode_with = "decode_args")]
/// fn query_function(a: u32, b: u32) {
///    // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Custom Return Value Encoding
///
/// You can specify a custom function to encode the return value.
/// The function must take the query return value as argument and return a `Vec<u8>`.
///
/// ```rust
/// # use ic_cdk::query;
/// fn encode_result(result: (u32, u32)) -> Vec<u8> {
///   // ...
/// # unimplemented!()
/// }
/// #[query(encode_with = "encode_result")]
/// fn query_function() -> (u32, u32) {
///  // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Composite Queries
///
/// To be able to make inter-canister calls from a query call, it must be a *composite* query (which cannot be executed in replicated mode).
///
/// ```rust
/// # use ic_cdk::query;
/// # fn wallet_canister_principal() -> candid::Principal { unimplemented!() }
/// #[query(composite = true)]
/// async fn composite_query_function() {
///    let (wallet_name,): (Option<String>,) = ic_cdk::call(wallet_canister_principal(), "name", ()).await.unwrap();
/// }
/// ```
///
/// ## Manual Reply
///
/// The query macro defaults to invoke [`msg_reply()`](crate::api::msg_reply) after the function execution.
/// If you want to execute other code after [`msg_reply()`](crate::api::msg_reply), you can:
/// - set `manual_reply` to `true` in macro attribute;
/// - set the return type to `PhantomData<T>` where `T` is the return type of the update method;
/// - call the [`msg_reply()`](crate::api::msg_reply) function explicitly;
/// - do other stuff;
/// - return `PhantomData`;
///
/// ```rust
/// # fn calculate_result() {}
/// # type MyResult = ();
/// # use ic_cdk::query;
/// # use std::marker::PhantomData;
/// #[query(manual_reply = true)]
/// fn query_function() -> PhantomData<MyResult> {
///     let result = calculate_result();
///     let reply_bytes = candid::encode_one(result).unwrap();
///     ic_cdk::api::msg_reply(reply_bytes);
///     PhantomData
/// }
/// ```
pub use ic_cdk_macros::query;

/// Register an update call entry point.
///
/// This attribute macro will export a function with name `canister_update <name>`
/// in the canister module.
///
/// # Examples
///
/// ## Basic Usage
///
/// ```rust
/// # use ic_cdk::update;
/// #[update]
/// fn update_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Custom Export Name
///
/// You can customize the name of the exported function.
///
/// ```rust
/// # use ic_cdk::update;
/// #[update(name = "some_name")]
/// fn update_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Hide From Candid Generation
///
/// If you want to hide this method in the Candid generated by [`export_candid!`],
/// you will need to set `hidden` to `true`. The entry point still exists in the canister.
///
/// ```rust
/// # use ic_cdk::update;
/// #[update(hidden = true)]
/// fn update_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Guard Functions
///
/// You can specify one or more guard functions to be executed before the update function.
/// Each guard function must return a `Result<(), String>`.
/// If any guard function returns an error, the update function will not proceed.
///
/// ```rust
/// # use ic_cdk::update;
/// fn guard1() -> Result<(), String> {
///     // ...
/// # unimplemented!()
/// }
/// fn guard2() -> Result<(), String> {
///     // ...
/// # unimplemented!()
/// }
/// #[update(guard = "guard1", guard = "guard2")]
/// fn update_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Custom Argument Decoding
///
/// You can specify a custom function to decode the arguments.
/// The function must take a `Vec<u8>` as an argument and return the same type as the update arguments.
///
/// ```rust
/// # use ic_cdk::update;
/// fn decode_args(arg_bytes: Vec<u8>) -> (u32, u32) {
///    // ...
/// # unimplemented!()
/// }
/// #[update(decode_with = "decode_args")]
/// fn update_function(a: u32, b: u32) {
///    // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Custom Return Value Encoding
///
/// You can specify a custom function to encode the return value.
/// The function must take the update return value as an argument and return a `Vec<u8>`.
///
/// ```rust
/// # use ic_cdk::update;
/// fn encode_result(result: (u32, u32)) -> Vec<u8> {
///   // ...
/// # unimplemented!()
/// }
/// #[update(encode_with = "encode_result")]
/// fn update_function() -> (u32, u32) {
///  // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Manual Reply
///
/// The update macro defaults to invoke [`msg_reply()`](crate::api::msg_reply) after the function execution.
/// If you want to execute other code after [`msg_reply()`](crate::api::msg_reply), you can:
/// - set `manual_reply` to `true` in macro attribute;
/// - set the return type to `PhantomData<T>` where `T` is the return type of the update method;
/// - call the [`msg_reply()`](crate::api::msg_reply) function explicitly;
/// - do other stuff;
/// - return `PhantomData`;
///
/// ```rust
/// # fn calculate_result() {}
/// # type MyResult = ();
/// # use ic_cdk::update;
/// # use std::marker::PhantomData;
/// #[update(manual_reply = true)]
/// fn update_function() -> PhantomData<MyResult> {
///     let result = calculate_result();
///     let reply_bytes = candid::encode_one(result).unwrap();
///     ic_cdk::api::msg_reply(reply_bytes);
///     PhantomData
/// }
/// ```
pub use ic_cdk_macros::update;

/// Register the `canister_init` entry point of a canister.
///
/// This attribute macro will export the function `canister_init`
/// in the canister module.
///
/// The function under this attribute must have no return value.
///
/// Each canister can only have one `canister_init` entry point.
///
/// # Example
///
/// ## Basic Usage
///
/// ```rust
/// # use ic_cdk::init;
/// #[init]
/// fn init_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Argument
///
/// The `init` function may accept an argument.
///
/// The argument must implement the `CandidType` trait.
///
/// And it should match the initialization parameters of the service constructor in the Candid interface.
///
/// ```rust
/// # use ic_cdk::init;
/// # use candid::*;
/// #[derive(Clone, Debug, CandidType, Deserialize)]
/// struct InitArg {
///     foo: u8,
/// }
///
/// #[init]
/// fn init_function(arg: InitArg) {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// In this case, the argument will be read from `ic0.msg_arg_data_size/copy` and passed to the
/// init function upon successful deserialization.
///
/// ## Custom Argument Decoding
///
/// You can specify a custom function to decode the arguments.
/// The function must take a `Vec<u8>` as an argument and return the same type as the init arguments.
///
/// ```rust
/// # use ic_cdk::init;
/// # use candid::*;
/// # #[derive(Clone, Debug, CandidType, Deserialize)]
/// # struct InitArg {
/// #    foo: u8,
/// # }
/// fn decode_args(arg_bytes: Vec<u8>) -> InitArg {
///     // ...
/// # unimplemented!()
/// }
/// #[init(decode_with = "decode_args")]
/// fn init_function(arg: InitArg) {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// Refer to the [`canister_init` Specification](https://internetcomputer.org/docs/references/ic-interface-spec/#system-api-init) for more information.
pub use ic_cdk_macros::init;

/// Register the `canister_pre_upgrade` entry point of a canister.
///
/// This attribute macro will export the function `canister_pre_upgrade`
/// in the canister module.
///
/// The function under this attribute must have no return value.
///
/// Each canister can only have one `canister_pre_upgrade` entry point.
///
/// # Example
///
/// ```rust
/// # use ic_cdk::pre_upgrade;
/// #[pre_upgrade]
/// fn pre_upgrade_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
pub use ic_cdk_macros::pre_upgrade;

/// Register the `canister_post_upgrade` entry point of a canister.
///
/// This attribute macro will export the function `canister_post_upgrade`
/// in the canister module.
///
/// The function under this attribute must have no return value.
///
/// Each canister can only have one `canister_post_upgrade` entry point.
///
/// # Example
///
/// ```rust
/// # use ic_cdk::post_upgrade;
/// #[post_upgrade]
/// fn post_upgrade_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// ## Argument
///
/// The `post_upgrade` function may accept an argument.
///
/// The argument must implement the `CandidType` trait.
///
/// And it should match the initialization parameters of the service constructor in the Candid interface.
/// Therefore, the `init` function and the `post_upgrade` function should take the same argument type.
///
/// ```rust
/// # use ic_cdk::post_upgrade;
/// # use candid::*;
/// #[derive(Clone, Debug, CandidType, Deserialize)]
/// struct InitArg {
///     foo: u8,
/// }
///
/// #[post_upgrade]
/// fn post_upgrade_function(arg: InitArg) {
///     // ...
/// # unimplemented!()
/// }
/// ```
///
/// In this case, the argument will be read from `ic0.msg_arg_data_size/copy` and passed to the
/// `post_upgrade` function upon successful deserialization.
///
/// ## Custom Argument Decoding
///
/// You can specify a custom function to decode the arguments.
/// The function must take a `Vec<u8>` as an argument and return the same type as the `post_upgrade` arguments.
///
/// ```rust
/// # use ic_cdk::post_upgrade;
/// # use candid::*;
/// # #[derive(Clone, Debug, CandidType, Deserialize)]
/// # struct InitArg {
/// #    foo: u8,
/// # }
/// fn decode_args(arg_bytes: Vec<u8>) -> InitArg {
///    // ...
/// # unimplemented!()
/// }
/// #[post_upgrade(decode_with = "decode_args")]
/// fn post_upgrade_function(arg: InitArg) {
///    // ...
/// # unimplemented!()
/// }
/// ```
pub use ic_cdk_macros::post_upgrade;

/// Register the `canister_heartbeat` entry point of a canister.
///
/// This attribute macro will export the function `canister_heartbeat`
/// in the canister module.
///
/// The function under this attribute must have no return value.
///
/// Each canister can only have one `canister_heartbeat` entry point.
///
/// # Example
///
/// ```rust
/// # use ic_cdk::heartbeat;
/// #[heartbeat]
/// fn heartbeat_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
pub use ic_cdk_macros::heartbeat;

/// Register the `canister_inspect_message` entry point of a canister.
///
/// This attribute macro will export the function `canister_inspect_message`
/// in the canister module.
///
/// The function under this attribute must have no return value.
///
/// Each canister can only have one `canister_inspect_message` entry point.
///
/// # Example
///
/// ```rust
/// # use ic_cdk::inspect_message;
/// #[inspect_message]
/// fn inspect_message_function() {
///     // ...
/// # unimplemented!()
/// }
/// ```
pub use ic_cdk_macros::inspect_message;

/// Register the `canister_on_low_wasm_memory` entry point of a canister.
///
/// This attribute macro will export the function `canister_on_low_wasm_memory`
/// in the canister module.
///
/// The function under this attribute must have no return value.
///
/// Each canister can only have one `canister_on_low_wasm_memory` entry point.
///
/// # Example
///
/// ```rust
/// # use ic_cdk::on_low_wasm_memory;
/// #[on_low_wasm_memory]
/// fn low_memory_handler() {
///     // ...
/// # unimplemented!()
/// }
/// ```
pub use ic_cdk_macros::on_low_wasm_memory;
